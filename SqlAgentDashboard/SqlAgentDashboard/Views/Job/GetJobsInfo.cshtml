@model IEnumerable<JobViewModel>

<!DOCTYPE html>
<html>
<head>
    <title>Información General Jobs</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script> 
    <!-- Add any additional CSS stylesheets here -->
</head>
<body>

    <div class="container mt-5">
        <h1 class="mb-4">SQL Server Jobs</h1>
        <table class="table table-bordered table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>JobId</th>
                    <th>JobName</th>
                    <th>LastRunDateTime</th>
                    <th>LastRunStatus</th>
                    <th>LastRunDuration</th>
                    <th>LastRunStatusMessage</th>
                    <th>NextRunDateTime</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var job in Model)
                {
                    <tr class="@GetRowClass(job.LastRunStatus)">
                        <td>@job.JobId</td>
                        <td>@job.JobName</td>
                        <td>@job.LastRunDateTime</td>
                        <td>@job.LastRunStatus</td>
                        <td>@job.LastRunDuration</td>
                        <td>@job.LastRunStatusMessage</td>
                        <td>@job.NextRunDateTime</td>
                        <td>
                           <button onclick="executeJob('@job.JobName')" class="btn btn-primary">Execute</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @functions {
        // Helper method to get CSS class based on job status
        string GetRowClass(string status)
        {
            return status == "Failed" ? "table-danger" : string.Empty;
        }
    }  

    <script>
        function executeJob(jobName) {
            // Disable the button to prevent multiple executions
            $('button').prop('disabled', true);

            // Call the server to execute the job asynchronously
            $.ajax({
                url: '/Job/ExecuteJob',
                type: 'POST',
                data: { jobName: jobName },
                success: function (result) {
                    // Enable the button after execution
                    $('button').prop('disabled', false);

                    // Display SweetAlert message based on the result
                    if (result.success) {
                        swal({
                            title: "Success",
                            text: "Job executed successfully!",
                            icon: "success"
                        }).then(function () {
                            // Redirect to the Index action
                            window.location.href = '/Job/GetJobsInfo';
                        });
                    } else {
                        swal({
                            title: "Error",
                            text: "Job execution failed!",
                            icon: "error"
                        });
                    }
                },
                error: function () {
                    // Enable the button on error
                    $('button').prop('disabled', false);

                    // Display SweetAlert for unexpected errors
                    swal({
                        title: "Error",
                        text: "An unexpected error occurred.",
                        icon: "error"
                    });
                }
            });
        }
    </script>
</body>
</html>

